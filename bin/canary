#!/usr/bin/env ruby
require 'fileutils'

# Path to the application root.
APP_ROOT = File.expand_path('..', __dir__)

# We want to guard against failures at each stage of this
def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

require "bundler/setup"
$LOAD_PATH.unshift File.expand_path("../../lib", __FILE__)

require "tooling_invoker"

failure_count_filepath = File.expand_path("../../CANARY_FAILURE_COUNT", __FILE__)

3.times do |idx|
  puts "Checking Canary (#{idx + 1}/3)..."

  if ToolingInvoker::CheckCanary.()
    File.delete(failure_count_filepath) if File.exists?(failure_count_filepath)
    # We're happy - sleep for 10mins. It'd be better to do this
    # in the AMI, but I don't have energy to create a new one.
    sleep(600)
    exit
  end

  failure_count = File.exists?(failure_count_filepath) ? File.read(failure_count_filepath).to_i : 0
  if failure_count >= 3
    `sudo shutdown now`
  else
    File.write(failure_count_filepath, failure_count + 1)
  end
  sleep(10)
end
